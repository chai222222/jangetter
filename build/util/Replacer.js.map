{"version":3,"sources":["../../src/util/Replacer.js"],"names":["REPLACERS","toHarfWidth","pattern","value","s","String","fromCharCode","charCodeAt","toHarfWidthAlnum","toHarfWidthSpace","trim","toOneSpace","toOneLine","Replacer","replaceDef","rcDef","repDefs","_addReplaceDefs","key","val","Array","isArray","map","_patternValueMapper","v","Error","undefined","RegExp","repObj","_","toPairs","forEach","values","arr","push","def","reduce","acc","elm","_replaceValue","replace","obj","fromPairs"],"mappings":"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","file":"Replacer.js","sourcesContent":["import _ from 'lodash';\nimport { stringify } from 'querystring';\n\n/** 共通リプレーサ定義 */\nexport const REPLACERS = {\n  toHarfWidth: {\n    pattern: /[！-～]/g,\n    value: (s) => {\n      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n    },\n  },\n  toHarfWidthAlnum: {\n    pattern: /[Ａ-Ｚａ-ｚ０-９]/g,\n    value: (s) => {\n      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n    },\n  },\n  toHarfWidthSpace: {\n    pattern: /　+/g,\n    value: ' ',\n  },\n  trim: [ { pattern: /^\\s+/, value: '' },\n          { pattern: /\\s+$/, value: '' } ],\n  toOneSpace: {\n    pattern: /\\s\\s+/g,\n    value: ' ',\n  },\n  toOneLine: {\n    pattern: /\\r?\\n/g,\n    value: ' ',\n  }\n}\n\nexport default class Replacer {\n  constructor(replaceDef, rcDef) {\n    this.repDefs = {};\n    if (typeof replaceDef === 'object') this._addReplaceDefs(replaceDef);\n    if (typeof rcDef === 'object') this._addReplaceDefs(rcDef);\n  }\n\n  _patternValueMapper(key, val) {\n    // 配列の場合には配列の中身全てを置き換える\n    if (Array.isArray(val)) return val.map(v => this._patternValueMapper(key, v));\n    if (typeof val !== 'object') throw new Error(`Must be array or object ${key}`);\n    const { pattern, value } = val;\n    if (pattern === undefined || value === undefined) throw new Error(`Not defined pattern or value in ${key}`);\n    return {\n      pattern: Array.isArray(pattern) ? new RegExp(...pattern) : pattern,\n      value,\n    };\n  }\n\n  _addReplaceDefs(repObj) {\n    _.toPairs(repObj).forEach(([key, value]) => {\n      const values = Array.isArray(value) ? value : [value];\n      const arr = this.repDefs[key] || (this.repDefs[key] = []);\n      arr.push(this._patternValueMapper(key, values));\n    })\n  }\n\n  _replaceValue(value, def) {\n    if (Array.isArray(def)) return def.reduce((acc, elm) => this._replaceValue(acc, elm), value);\n    return value.replace(def.pattern, def.value);\n  }\n\n  /**\n   * 値を定義にそって置き換えを行います。\n   */\n  replaceValues(obj) {\n    return _.fromPairs(_.toPairs(obj).map(([key, value]) => (\n      [ key, key in this.repDefs ? this._replaceValue(value, this.repDefs[key]) : value ]\n    )));\n  }\n}\n"]}