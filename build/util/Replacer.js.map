{"version":3,"sources":["../../src/util/Replacer.js"],"names":["REPLACER_FUNCTIONS","toHarfWidth","s","String","fromCharCode","charCodeAt","toHarfWidthDigitOnly","replace","REPLACERS","pattern","value","toHarfWidthAlnum","toHarfWidthSpace","trim","toOneSpace","toNoSpace","toOneLine","lastWideParenthesesToHarfWidth","Replacer","showReplacers","console","log","Object","keys","forEach","key","toSpecialString","toReplacersKey","re","toPairs","filter","v","map","k","head","toReplacersValue","reStr","data","changeReplacersName","repKey","_","isFunction","toString","RegExp","isArray","datam","isString","isNumber","isObject","Error","fromPairs","fromSpecialString","res","exec","eval","substring","lastIndexOf","charAt","constructor","replaceDef","rcDef","repDefs","_addReplaceDefs","_patternValueMapper","val","undefined","Array","repObj","values","arr","push","_replaceValue","def","reduce","acc","elm","replaceValues","obj"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\n/** 共通置き換え関数定義 */\nexport const REPLACER_FUNCTIONS = {\n  toHarfWidth: (s) => String.fromCharCode(s.charCodeAt(0) - 0xFEE0),\n  toHarfWidthDigitOnly: (s) => s.replace(/[０-９]/g, REPLACER_FUNCTIONS.toHarfWidth),\n};\n\n/** 共通リプレーサ定義 */\nexport const REPLACERS = {\n  toHarfWidth: {\n    pattern: /[！-～]/g,\n    value: REPLACER_FUNCTIONS.toHarfWidth,\n  },\n  toHarfWidthAlnum: {\n    pattern: /[Ａ-Ｚａ-ｚ０-９]/g,\n    value: REPLACER_FUNCTIONS.toHarfWidth,\n  },\n  toHarfWidthSpace: {\n    pattern: /　+/g,\n    value: ' ',\n  },\n  trim: [ { pattern: /^\\s+/, value: '' },\n          { pattern: /\\s+$/, value: '' } ],\n  toOneSpace: {\n    pattern: /\\s\\s+/g,\n    value: ' ',\n  },\n  toNoSpace: {\n    pattern: /\\s/g,\n    value: '',\n  },\n  toOneLine: {\n    pattern: /\\r?\\n/g,\n    value: ' ',\n  },\n  lastWideParenthesesToHarfWidth: {\n    pattern: /（[０-９]） *$/g,\n    value: REPLACER_FUNCTIONS.toHarfWidth,\n  },\n};\n\nexport default class Replacer {\n  /**\n   * 定義されているREPLACERS一覧を出力します。\n   */\n  static showReplacers() {\n    console.log('**** REPLACERS ****');\n    Object.keys(REPLACERS).forEach(key => console.log(key, Replacer.toSpecialString(REPLACERS[key], false)));\n  }\n\n  /**\n   * 指定された正規表現を REPLACERS に変更します。\n   * @param {Object|Array} re 正規表現定義\n   * @return {String} キー文字列。定義されていない場合にはundefinedを返します。\n   */\n  static toReplacersKey(re) {\n    return _(REPLACERS).toPairs().filter(([, v]) => v === re).map(([k]) => k).head();\n  }\n\n  /**\n   * 指定された文字列から定義済みREPLACERSに変換します。\n   * @param {String} reStr REPLACERキー文字列\n   * @return {Object|Array} 正規表現定義。定義されていない場合にはundefinedを返します。\n   */\n  static toReplacersValue(reStr) {\n    return REPLACERS[reStr];\n  }\n\n  /**\n   * Type文字列定義を用いた記述へ変換します。\n   * @param {Object|Array|RegExp|String|Number} data 変換定義の値部\n   * @param {Boolean} changeReplacersName 正規表現を REPLACERS 定義の名前に変換する場合には真を設定します。\n   * @return {Object|Array|RegExp|String|Number} 変換されたデータ\n   */\n  static toSpecialString(data, changeReplacersName = true) {\n    if (changeReplacersName) {\n      const repKey = Replacer.toReplacersKey(data);\n      if (repKey) return `Type(REPLACERS)${repKey}`;\n    }\n    if (_.isFunction(data)) return `Type(Function)${data.toString()}`;\n    if (data instanceof RegExp) return `Type(RegExp)${data.toString()}`;\n    if (_.isArray(data)) return data.map(datam => Replacer.toSpecialString(datam, changeReplacersName));\n    if (_.isString(data) || _.isNumber(data)) return data;\n    if (!_.isObject(data)) throw new Error(`Must be array, object, String, Number, Function. data is ${typeof data}`);\n    return _.fromPairs(_.toPairs(data).map(([k, v]) => [k, Replacer.toSpecialString(v, changeReplacersName)]));\n  }\n\n  /**\n   * Type文字列定義を用いた記述から変換します。\n   */\n  static fromSpecialString(data, changeReplacersName = true) {\n    const repKey = Replacer.toReplacersKey(data);\n    if (repKey) return data; // 既存定義と同じインスタンスの場合そのものを返す\n    if (_.isString(data)) {\n      const res = /^Type\\((\\w+)\\)(.*)$/.exec(data);\n      // \"Type(型)値\"\n      if (res) {\n        // eslint-disable-next-line no-eval\n        if (res[1] === 'Function') return eval(res[2]);\n        if (res[1] === 'RegExp') return new RegExp(res[2].substring(1, res[2].lastIndexOf(res[2].charAt(0)), res[2].lastIndexOf(res[2].charAt(0)) + 1));\n        if (res[1] === 'REPLACERS' && changeReplacersName && REPLACERS[res[2]]) return REPLACERS[res[2]];\n        throw new Error(`Invalid data ${data}`);\n      }\n    }\n    if (_.isArray(data)) return data.map(datam => Replacer.fromSpecialString(datam, changeReplacersName));\n    if (_.isString(data) || _.isNumber(data) || _.isFunction(data) || data instanceof RegExp) return data;\n    if (!_.isObject(data)) throw new Error(`Must be array, object, String, Number, Function. data is ${typeof data}`);\n    return _.fromPairs(_.toPairs(data).map(([k, v]) => [k, Replacer.fromSpecialString(v, changeReplacersName)]));\n  }\n\n  constructor(replaceDef, rcDef) {\n    this.repDefs = {};\n    if (typeof replaceDef === 'object') this._addReplaceDefs(replaceDef);\n    if (typeof rcDef === 'object') this._addReplaceDefs(rcDef);\n  }\n\n  /**\n   * 置き換え定義のパターンを正規表現へ変換します。\n   *\n   * @param {String} key 置き換えキー値\n   * @param {Object|Array<Object>} val 置き換え定義\n   * @param {String|Array<String>} val.pattern 置き換えパターン。配列の場合、RegExpコンストラクタの引数で、文字列の場合、単純置き換え文字列。\n   * @param {String} val.value 置き換後の文字列\n   * @return {Object|Array<Object>} patternを正規表現に変換した後のオブジェクト、もしくはオブジェクトの配列を返す。\n   */\n  _patternValueMapper(key, val) {\n    // 定義済み値の場合には、定義済みインスタンスを返す\n    const repKey = Replacer.toReplacersKey(val);\n    if (repKey) return val;\n    // 配列の場合には配列の中身全てを置き換える\n    if (_.isArray(val)) return val.map(v => this._patternValueMapper(key, v));\n    if (!_.isObject(val)) throw new Error(`Must be array or object ${key} ${val}`);\n    const { pattern, value } = val;\n    if (pattern === undefined || value === undefined) throw new Error(`Not defined pattern or value in ${key}`);\n    return {\n      pattern: Array.isArray(pattern) ? new RegExp(...pattern) : pattern,\n      value,\n    };\n  }\n\n  _addReplaceDefs(repObj) {\n    _.toPairs(Replacer.fromSpecialString(repObj)).forEach(([key, value]) => {\n      const values = Array.isArray(value) ? value : [value];\n      const arr = this.repDefs[key] || (this.repDefs[key] = []);\n      arr.push(this._patternValueMapper(key, values));\n    })\n  }\n\n  _replaceValue(value, def) {\n    if (Array.isArray(def)) return def.reduce((acc, elm) => this._replaceValue(acc, elm), value);\n    return value.replace(def.pattern, def.value);\n  }\n\n  /**\n   * 値を定義にそって置き換えを行います。\n   */\n  replaceValues(obj) {\n    return _.fromPairs(_.toPairs(obj).map(([key, value]) => (\n      [ key, key in this.repDefs ? this._replaceValue(value, this.repDefs[key]) : value ]\n    )));\n  }\n}\n"],"file":"Replacer.js"}