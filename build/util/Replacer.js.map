{"version":3,"sources":["../../src/util/Replacer.js"],"names":["REPLACERS","toHarfWidth","pattern","value","s","String","fromCharCode","charCodeAt","toHarfWidthAlnum","toHarfWidthSpace","trim","toOneSpace","toNoSpace","toOneLine","Replacer","constructor","replaceDef","rcDef","repDefs","_addReplaceDefs","_patternValueMapper","key","val","Array","isArray","map","v","Error","undefined","RegExp","repObj","_","toPairs","forEach","values","arr","push","_replaceValue","def","reduce","acc","elm","replace","replaceValues","obj","fromPairs"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { stringify } from 'querystring';\n\n/** 共通リプレーサ定義 */\nexport const REPLACERS = {\n  toHarfWidth: {\n    pattern: /[！-～]/g,\n    value: (s) => {\n      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n    },\n  },\n  toHarfWidthAlnum: {\n    pattern: /[Ａ-Ｚａ-ｚ０-９]/g,\n    value: (s) => {\n      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n    },\n  },\n  toHarfWidthSpace: {\n    pattern: /　+/g,\n    value: ' ',\n  },\n  trim: [ { pattern: /^\\s+/, value: '' },\n          { pattern: /\\s+$/, value: '' } ],\n  toOneSpace: {\n    pattern: /\\s\\s+/g,\n    value: ' ',\n  },\n  toNoSpace: {\n    pattern: /\\s/g,\n    value: '',\n  },\n  toOneLine: {\n    pattern: /\\r?\\n/g,\n    value: ' ',\n  }\n}\n\nexport default class Replacer {\n  constructor(replaceDef, rcDef) {\n    this.repDefs = {};\n    if (typeof replaceDef === 'object') this._addReplaceDefs(replaceDef);\n    if (typeof rcDef === 'object') this._addReplaceDefs(rcDef);\n  }\n\n  _patternValueMapper(key, val) {\n    // 配列の場合には配列の中身全てを置き換える\n    if (Array.isArray(val)) return val.map(v => this._patternValueMapper(key, v));\n    if (typeof val !== 'object') throw new Error(`Must be array or object ${key}`);\n    const { pattern, value } = val;\n    if (pattern === undefined || value === undefined) throw new Error(`Not defined pattern or value in ${key}`);\n    return {\n      pattern: Array.isArray(pattern) ? new RegExp(...pattern) : pattern,\n      value,\n    };\n  }\n\n  _addReplaceDefs(repObj) {\n    _.toPairs(repObj).forEach(([key, value]) => {\n      const values = Array.isArray(value) ? value : [value];\n      const arr = this.repDefs[key] || (this.repDefs[key] = []);\n      arr.push(this._patternValueMapper(key, values));\n    })\n  }\n\n  _replaceValue(value, def) {\n    if (Array.isArray(def)) return def.reduce((acc, elm) => this._replaceValue(acc, elm), value);\n    return value.replace(def.pattern, def.value);\n  }\n\n  /**\n   * 値を定義にそって置き換えを行います。\n   */\n  replaceValues(obj) {\n    return _.fromPairs(_.toPairs(obj).map(([key, value]) => (\n      [ key, key in this.repDefs ? this._replaceValue(value, this.repDefs[key]) : value ]\n    )));\n  }\n}\n"],"file":"Replacer.js"}