{"version":3,"sources":["../src/index.js"],"names":["process","on","console","dir","argv","option","name","short","type","description","Object","keys","Site","map","charAt","toLocaleUpperCase","args","run","targets","length","some","options","help","exit","outputDir","output","errorTxt","error","searchers","words","puppeteer","launch","ignoreHTTPSErrors","headless","browser","newPage","page","log","frm","url","setViewport","Constants","viewport","errors","filter","s","search","fs","writeFile","join","err","stack","close"],"mappings":"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","file":"index.js","sourcesContent":["import 'babel-polyfill';  // eslint-disable-line import/no-extraneous-dependencies\nimport fs from 'fs';\nimport argv from 'argv';\nimport puppeteer from 'puppeteer';\nimport iconv from 'iconv-lite';\nimport { forEachSeries } from 'p-iteration';\nimport { Parser as Json2csvParser } from 'json2csv';\n\nimport Constants from './constants';\nimport Site from './site';\n\nprocess.on('unhandledRejection', console.dir);\n\nargv.option([ {\n  name: 'output',\n  short: 'o',\n  type: 'path',\n  description: 'output csv directory path.',\n}, {\n  name: 'error',\n  short: 'e',\n  type: 'path',\n  description: 'output error file path.',\n}, {\n  name: 'enable-cheerio-httpcli',\n  type: 'boolean',\n  description: 'disable cheerio-httpcli.',\n}, ...Object.keys(Site).map(name => ({\n  name,\n  short: name.charAt(0).toLocaleUpperCase(), /// 先頭一文字目はかぶらない前提\n  type: 'boolean',\n  description: `search from ${name}`,\n})), ]);\nconst args = argv.run();\n\nif (args.targets.length < 1 || !Object.keys(Site).some(name => args.options[name])) {\n  argv.help();\n  process.exit(0);\n}\n\nconst outputDir = args.options.output || '.';\nconst errorTxt = args.options.error || 'error.txt';\nconst searchers = [];\n\n(async (words) => {\n  const browser = await puppeteer.launch({\n    ignoreHTTPSErrors: true,\n    headless: true,\n    args: [\n      '--enable-features=NetworkService',\n      '--enable-logging',\n      '--no-sandbox',\n      '--v=1',\n      // `--proxy-server=${config.proxyUrl}`,\n    ],\n  });\n  try {\n    const page = await browser.newPage();\n    await page.on('framenavigated', frm => {\n      console.log(\"### URL \", frm.url());\n    });\n    await page.setViewport(Constants.viewport);\n\n    const errors = [];\n    const searchers = Object.keys(Site)\n      .filter(name => args.options[name])\n      .map(name => Site[name]({outputDir, page, errors, options: args.options}));\n\n    await forEachSeries(searchers, async s => await s.search(...words));\n\n    if (errors.length) {\n      console.log(`エラーが発生しました。${errorTxt} へ出力します。`);\n      fs.writeFile(errorTxt, errors.join('\\n'), (err) => {\n        if (err) {\n            throw err;\n        }\n      });\n    }\n  } catch (e) {\n    console.log(e.stack);\n  } finally {\n    console.log('finally');\n    browser.close();\n  }\n})(args.targets);\n"]}